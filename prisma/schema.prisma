generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Rol {
  ADMIN
  AGENTE
  LUGAR
}

model Cliente {
  id           Int           @id @default(autoincrement())
  nombre       String
  direccion    String
  email        String?       @unique
  telefono     String?
  comparativas Comparativa[]
  contratos    Contrato[]
}

model Comparativa {
  id             Int      @id @default(autoincrement())
  clienteId      Int
  tipoServicio   String
  tipoTarifa     String
  nombreTarifa   String
  consumoAnual   Float
  importeFactura Float
  ahorro         Float    @default(0)
  comision       Float    @default(0)
  fecha          DateTime @default(now())
  agenteId       Int
  lugarId        Int

  cliente      Cliente                @relation(fields: [clienteId], references: [id])
  agente       Agente                 @relation(fields: [agenteId], references: [id])
  lugar        Lugar                  @relation(fields: [lugarId], references: [id])
  datosFactura DatosFactura?
  resultados   ResultadoComparativa[]
}

model ResultadoComparativa {
  id             Int    @id @default(autoincrement())
  comparativaId  Int
  compa√±ia      String
  tarifa         String
  precioAnual    Float
  ahorroEstimado Float

  comparativa Comparativa @relation(fields: [comparativaId], references: [id])
}

model Contrato {
  id        Int      @id @default(autoincrement())
  clienteId Int
  servicio  String
  compa√±ia String
  tarifa    String
  fechaAlta DateTime @default(now())
  comision  Float
  agenteId  Int?

  cliente Cliente @relation(fields: [clienteId], references: [id])
  agente  Agente? @relation(fields: [agenteId], references: [id])
}

model Agente {
  id       Int     @id @default(autoincrement())
  nombre   String
  email    String  @unique
  telefono String?

  // % del REMANENTE para el Agente (0..1). Si es null, se usan defaults/overrides.
  pctAgente Decimal? @db.Decimal(5, 4)

  contratos    Contrato[]
  lugares      Lugar[]
  comparativas Comparativa[]
  qrs          QR[]
  leads        Lead[]
  usuarios     Usuario[]
  overrides    ComisionOverride[]

  creadoEn DateTime @default(now())
}

model Lugar {
  id        Int    @id @default(autoincrement())
  nombre    String
  direccion String
  qrCode    String @unique
  agenteId  Int

  // % del POOL para el Cliente (0..1). Si es null, se usan defaults/overrides.
  pctCliente Decimal? @db.Decimal(5, 4)
  // % del REMANENTE para el Lugar (0..1). Si es null, se usan defaults/overrides.
  pctLugar   Decimal? @db.Decimal(5, 4)

  agente       Agente             @relation(fields: [agenteId], references: [id])
  comparativas Comparativa[]
  qrs          QR[]
  leads        Lead[]
  usuarios     Usuario[]
  overrides    ComisionOverride[]

  creadoEn DateTime @default(now())

   // --- Personalizaci√≥n landing ---
  especial          Boolean  @default(false)
  especialLogoUrl   String?   // ej: /uploads/lugares/101.png o https://cdn/club.png
  especialColor     String?   // ej: #FF7A3B
  especialMensaje   String?   // ej: "AYUDA A TU CLUB"

  // --- M√©trica para el contador de la landing ---
  aportacionAcumulada Int     @default(0) // en euros (usa Int; si prefieres c√©ntimos, dime y lo cambiamos a BigInt)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model QR {
  id       Int    @id @default(autoincrement())
  codigo   String @unique
  lugarId  Int
  agenteId Int?

  lugar  Lugar   @relation(fields: [lugarId], references: [id])
  agente Agente? @relation(fields: [agenteId], references: [id])
}

model Usuario {
  id       Int    @id @default(autoincrement())
  nombre   String
  email    String @unique
  password String
  rol      Rol    @default(LUGAR)
  agenteId Int?
  lugarId  Int?

  agente Agente? @relation(fields: [agenteId], references: [id])
  lugar  Lugar?  @relation(fields: [lugarId], references: [id])
}

model Lead {
  id       Int      @id @default(autoincrement())
  nombre   String
  email    String
  telefono String
  estado   String   @default("pendiente")
  creadoEn DateTime @default(now())

  lugarId Int?
  lugar   Lugar? @relation(fields: [lugarId], references: [id])

  agenteId Int?
  agente   Agente? @relation(fields: [agenteId], references: [id])
}

model DatosFactura {
  id                   Int         @id @default(autoincrement())
  tipoCliente          String?
  tipoTarifa           String?
  nombreTarifa         String?
  cups                 String?
  fechaInicio          String?
  fechaFin             String?
  consumoPeriodos      String?
  potencias            String?
  consumoAnualKWh      Float?
  importeFactura       Float?
  iva                  Float?
  impuestoElectricidad Float?
  territorio           String?
  reactiva             Float?
  exceso               Float?
  alquiler             Float?
  otros                Float?
  comparativaId        Int         @unique
  comparativa          Comparativa @relation(fields: [comparativaId], references: [id])
}

model FondoCartel {
  id       Int      @id @default(autoincrement())
  nombre   String
  url      String
  creadoEn DateTime @default(now())
  activo   Boolean  @default(false)
}

model FondoActivo {
  id       Int      @id @default(1)
  url      String
  creadoEn DateTime @default(now())
}

model Fondo {
  id       Int      @id @default(autoincrement())
  nombre   String
  url      String   @unique
  creadoEn DateTime @default(now())
  activo   Boolean  @default(false)
}

model ConfiguracionGlobal {
  id             Int    @id @default(1)
  fondoCartelUrl String
}

// ======================
// Ofertas (marketing)
// ======================
model Oferta {
  id               Int      @id @default(autoincrement())
  titulo           String
  descripcion      String
  descripcionCorta String?
  tipo             String // 'luz' | 'gas' | 'telefonia'
  destacada        Boolean  @default(false)
  activa           Boolean  @default(true)
  creadaEn         DateTime @default(now())

  // Enlace opcional al cat√°logo (si esta oferta nace de una tarifa)
  ofertaTarifaId Int?
  ofertaTarifa   OfertaTarifa? @relation("TarifaAOferta", fields: [ofertaTarifaId], references: [id])

  @@index([ofertaTarifaId])
}

model ProductoGanadero {
  id          String   @id @default(cuid())
  nombre      String
  descripcion String
  categoria   String
  precioCoste Float
  margen      Float
  precioPVP   Float
  descuento   Float?
  precioFinal Float
  imagenUrl   String
  activo      Boolean  @default(true)
  creadoEn    DateTime @default(now())
}

/**
 * =========
 * COMISIONES
 * =========
 */

/// Defaults globales cuando Lugar/Agente no tienen valores propios ni hay override.
/// Porcentajes 0..1 (ej: 0.30 = 30%)
model GlobalComisionDefaults {
  id                Int      @id @default(1)
  defaultPctCliente Decimal  @db.Decimal(5, 4)
  defaultPctLugar   Decimal  @db.Decimal(5, 4)
  defaultPctAgente  Decimal  @db.Decimal(5, 4)
  actualizadoEn     DateTime @updatedAt

  @@map("global_comision_defaults")
}

/// Reglas espec√≠ficas por Lugar (y opcionalmente Agente), filtrables por compa√±√≠a/tarifa,
/// con vigencia y prioridad. pctCliente aplica sobre POOL; pctLugar/pctAgente sobre REMANENTE.
model ComisionOverride {
  id Int @id @default(autoincrement())

  lugarId Int
  lugar   Lugar @relation(fields: [lugarId], references: [id])

  agenteId Int?
  agente   Agente? @relation(fields: [agenteId], references: [id])

  // Filtros opcionales
  compania String?
  tarifa   String?

  // Si no son null, pisan el valor correspondiente (0..1)
  pctCliente Decimal? @db.Decimal(5, 4)
  pctLugar   Decimal? @db.Decimal(5, 4)
  pctAgente  Decimal? @db.Decimal(5, 4)

  validFrom DateTime?
  validTo   DateTime?
  activo    Boolean   @default(true)
  prioridad Int       @default(0)

  creadoEn      DateTime @default(now())
  actualizadoEn DateTime @updatedAt

  @@index([lugarId, compania, tarifa, activo, validFrom, validTo])
  @@map("comision_override")
}

// ======================
// Cat√°logo de tarifas
// ======================
enum TipoOferta {
  LUZ
  GAS
  TELEFONIA
}

model OfertaTarifa {
  id               Int        @id @default(autoincrement())
  tipo             TipoOferta // LUZ | GAS | TELEFONIA
  subtipo          String // p.ej. '2.0TD' | '3.0TD' | '6.1TD'
  compania         String
  anexoPrecio      String? // nombre/c√≥digo del anexo de precios (si viene)
  nombre           String // nombre comercial de la tarifa en el Excel
  descripcion      String? // descripci√≥n de la oferta (del Excel)
  descripcionCorta String?
  activa           Boolean    @default(true)
  destacada        Boolean    @default(false)

  // PRECIOS ENERG√çA (‚Ç¨/kWh) por periodo. Para 2.0TD deja P4..P6 a 0
  precioKwhP1 Decimal? @db.Decimal(10, 6)
  precioKwhP2 Decimal? @db.Decimal(10, 6)
  precioKwhP3 Decimal? @db.Decimal(10, 6)
  precioKwhP4 Decimal? @db.Decimal(10, 6)
  precioKwhP5 Decimal? @db.Decimal(10, 6)
  precioKwhP6 Decimal? @db.Decimal(10, 6)

  // Comisi√≥n base (‚Ç¨/kWh) cuando no encaja ning√∫n tramo
  comisionKwhAdminBase Decimal? @db.Decimal(10, 6)

  // Extras (condiciones, URLs, etc.)
  payload Json?

  // Relaciones
  tramos  OfertaTarifaTramo[]
  ofertas Oferta[]            @relation("TarifaAOferta") // üëà back-rel a Oferta

  creadaEn      DateTime @default(now())
  actualizadaEn DateTime @updatedAt

  @@unique([tipo, subtipo, compania, nombre, anexoPrecio])
  @@index([tipo, subtipo, compania])
  @@index([tipo, subtipo, anexoPrecio])
}

model OfertaTarifaTramo {
  id             Int @id @default(autoincrement())
  ofertaTarifaId Int

  // Consumo anual en kWh (si el Excel trae mensual, conviertes al importar)
  consumoDesdeKWh Int
  consumoHastaKWh Int? // null = sin tope superior

  // Comisi√≥n espec√≠fica del tramo
  comisionKwhAdmin  Decimal? @db.Decimal(10, 6) // ‚Ç¨/kWh
  comisionFijaAdmin Decimal? @db.Decimal(10, 2) // ‚Ç¨ fijos

  // Reparto por rol (opcional)
  pctCliente Decimal? @db.Decimal(5, 4) // 0..1
  pctLugar   Decimal? @db.Decimal(5, 4) // 0..1
  pctAgente  Decimal? @db.Decimal(5, 4) // 0..1

  // Vigencia por tramo (opcional)
  validFrom DateTime?
  validTo   DateTime?
  activo    Boolean   @default(true)
  notas     String?

  ofertaTarifa OfertaTarifa @relation(fields: [ofertaTarifaId], references: [id], onDelete: Cascade)

  @@unique([ofertaTarifaId, consumoDesdeKWh, consumoHastaKWh])
  @@index([ofertaTarifaId])
  @@index([consumoDesdeKWh, consumoHastaKWh])
}
