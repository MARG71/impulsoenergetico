generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Rol {
  ADMIN
  AGENTE
  LUGAR
}

model Cliente {
  id           Int           @id @default(autoincrement())
  nombre       String
  direccion    String
  email        String?       @unique
  telefono     String?
  comparativas Comparativa[]
  contratos    Contrato[]
}

model Comparativa {
  id             Int      @id @default(autoincrement())
  clienteId      Int
  tipoServicio   String
  tipoTarifa     String
  nombreTarifa   String
  consumoAnual   Float
  importeFactura Float
  ahorro         Float    @default(0)
  comision       Float    @default(0)
  fecha          DateTime @default(now())
  agenteId       Int
  lugarId        Int

  cliente      Cliente                @relation(fields: [clienteId], references: [id])
  agente       Agente                 @relation(fields: [agenteId], references: [id])
  lugar        Lugar                  @relation(fields: [lugarId], references: [id])
  datosFactura DatosFactura?
  resultados   ResultadoComparativa[]
}

model ResultadoComparativa {
  id             Int    @id @default(autoincrement())
  comparativaId  Int
  compañia       String
  tarifa         String
  precioAnual    Float
  ahorroEstimado Float

  comparativa Comparativa @relation(fields: [comparativaId], references: [id])
}

model Contrato {
  id        Int      @id @default(autoincrement())
  clienteId Int
  servicio  String
  compañia  String
  tarifa    String
  fechaAlta DateTime @default(now())
  comision  Float
  agenteId  Int?

  cliente Cliente @relation(fields: [clienteId], references: [id])
  agente  Agente? @relation(fields: [agenteId], references: [id])
}

model Agente {
  id           Int           @id @default(autoincrement())
  nombre       String
  email        String        @unique
  telefono     String?

  // % del REMANENTE para el Agente (0..1). Si es null, se usan defaults/overrides.
  pctAgente    Decimal?      @db.Decimal(5, 4)

  contratos    Contrato[]
  lugares      Lugar[]
  comparativas Comparativa[]
  qrs          QR[]
  leads        Lead[]
  usuarios     Usuario[]
  overrides    ComisionOverride[]

  creadoEn     DateTime @default(now())
}

model Lugar {
  id        Int    @id @default(autoincrement())
  nombre    String
  direccion String
  qrCode    String @unique
  agenteId  Int

  // % del POOL para el Cliente (0..1). Si es null, se usan defaults/overrides.
  pctCliente Decimal? @db.Decimal(5, 4)
  // % del REMANENTE para el Lugar (0..1). Si es null, se usan defaults/overrides.
  pctLugar   Decimal? @db.Decimal(5, 4)

  agente       Agente        @relation(fields: [agenteId], references: [id])
  comparativas Comparativa[]
  qrs          QR[]
  leads        Lead[]
  usuarios     Usuario[]
  overrides    ComisionOverride[]

  creadoEn     DateTime @default(now())
}

model QR {
  id       Int    @id @default(autoincrement())
  codigo   String @unique
  lugarId  Int
  agenteId Int?

  lugar  Lugar   @relation(fields: [lugarId], references: [id])
  agente Agente? @relation(fields: [agenteId], references: [id])
}

model Usuario {
  id       Int    @id @default(autoincrement())
  nombre   String
  email    String @unique
  password String
  rol      Rol    @default(LUGAR)
  agenteId Int?
  lugarId  Int?

  agente Agente? @relation(fields: [agenteId], references: [id])
  lugar  Lugar?  @relation(fields: [lugarId], references: [id])
}

model Lead {
  id       Int      @id @default(autoincrement())
  nombre   String
  email    String
  telefono String
  estado   String   @default("pendiente")
  creadoEn DateTime @default(now())

  lugarId Int?
  lugar   Lugar? @relation(fields: [lugarId], references: [id])

  agenteId Int?
  agente   Agente? @relation(fields: [agenteId], references: [id])
}

model DatosFactura {
  id                    Int           @id @default(autoincrement())
  tipoCliente           String?
  tipoTarifa            String?
  nombreTarifa          String?
  cups                  String?
  fechaInicio           String?
  fechaFin              String?
  consumoPeriodos       String?
  potencias             String?
  consumoAnualKWh       Float?
  importeFactura        Float?
  iva                   Float?
  impuestoElectricidad  Float?
  territorio            String?
  reactiva              Float?
  exceso                Float?
  alquiler              Float?
  otros                 Float?
  comparativaId         Int           @unique
  comparativa           Comparativa   @relation(fields: [comparativaId], references: [id])
}

model FondoCartel {
  id        Int      @id @default(autoincrement())
  nombre    String
  url       String
  creadoEn  DateTime @default(now())
  activo    Boolean  @default(false)
}

model FondoActivo {
  id        Int      @id @default(1)
  url       String
  creadoEn  DateTime @default(now())
}

model Fondo {
  id        Int      @id @default(autoincrement())
  nombre    String
  url       String   @unique
  creadoEn  DateTime @default(now())
  activo    Boolean  @default(false)
}

model ConfiguracionGlobal {
  id              Int    @id @default(1)
  fondoCartelUrl  String
}

model Oferta {
  id          Int      @id @default(autoincrement())
  titulo      String
  descripcion String
  tipo        String   // 'luz' | 'gas' | 'telefonia'
  destacada   Boolean  @default(false)
  activa      Boolean  @default(true)
  creadaEn    DateTime @default(now())
}

model ProductoGanadero {
  id              String   @id @default(cuid())
  nombre          String
  descripcion     String
  categoria       String
  precioCoste     Float
  margen          Float
  precioPVP       Float
  descuento       Float?
  precioFinal     Float
  imagenUrl       String
  activo          Boolean  @default(true)
  creadoEn        DateTime @default(now())
}

/* =========
   COMISIONES
   ========= */

/// Defaults globales cuando Lugar/Agente no tienen valores propios ni hay override.
/// Porcentajes 0..1 (ej: 0.30 = 30%)
model GlobalComisionDefaults {
  id                Int     @id @default(1)
  defaultPctCliente Decimal  @db.Decimal(5, 4)
  defaultPctLugar   Decimal  @db.Decimal(5, 4)
  defaultPctAgente  Decimal  @db.Decimal(5, 4)
  actualizadoEn     DateTime @updatedAt

  @@map("global_comision_defaults")
}

/// Reglas específicas por Lugar (y opcionalmente Agente), filtrables por compañía/tarifa,
/// con vigencia y prioridad. pctCliente aplica sobre POOL; pctLugar/pctAgente sobre REMANENTE.
model ComisionOverride {
  id        Int     @id @default(autoincrement())

  lugarId   Int
  lugar     Lugar   @relation(fields: [lugarId], references: [id])

  agenteId  Int?
  agente    Agente? @relation(fields: [agenteId], references: [id])

  // Filtros opcionales
  compania  String?
  tarifa    String?

  // Si no son null, pisan el valor correspondiente (0..1)
  pctCliente Decimal? @db.Decimal(5, 4)
  pctLugar   Decimal? @db.Decimal(5, 4)
  pctAgente  Decimal? @db.Decimal(5, 4)

  validFrom  DateTime?
  validTo    DateTime?
  activo     Boolean  @default(true)
  prioridad  Int      @default(0)

  creadoEn     DateTime @default(now())
  actualizadoEn DateTime @updatedAt

  @@index([lugarId, compania, tarifa, activo, validFrom, validTo])
  @@map("comision_override")
}
